name: CI/CD for Spring Boot App

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build, Test and Push to Artifact Registry
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Configure Docker to use Google Cloud credentials
        run: |
          REGISTRY_LOCATION=$(echo "${{ secrets.DOCKER_IMAGE_NAME }}" | cut -d'/' -f1)
          gcloud auth configure-docker "$REGISTRY_LOCATION"

      - name: Build and Push Docker image manually
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to GCP VM
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH and Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_PRIVATE_KEY }}
          script: |
            # 환경 변수 설정
            export DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}

            # 작업 디렉토리로 이동 (프로젝트가 있는 경로)
            cd ~/songs_be

            # 최신 docker-compose.yml 파일을 git에서 받아옵니다.
            git pull origin main

            # Artifact Registry 주소만 추출
            REGISTRY_LOCATION=$(echo "$DOCKER_IMAGE_NAME" | cut -d'/' -f1)
            
            # Google Cloud에 로그인하여 private registry에 접근
            gcloud auth configure-docker "$REGISTRY_LOCATION"

            # 1. 새로운 이미지를 명시적으로 받아옵니다.
            docker compose pull

            # 2. 기존 컨테이너를 중지하고 삭제하여 확실하게 교체합니다.
            docker compose down

            # 3. 새로운 이미지로 컨테이너를 다시 시작합니다.
            docker compose up -d

            # 4. 불필요한 이전 이미지들을 삭제합니다.
            docker image prune -f