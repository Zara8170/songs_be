server:
  port: 8082
  address: ${SERVER_ADDRESS}
  forward-headers-strategy: native
  max-http-header-size: 8KB
  max-http-post-size: 10MB
  tomcat:
    max-swallow-size: 10MB
    max-http-form-post-size: 10MB

  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  profiles:
    active: local
  config:
    import: optional:file:.env[.properties] # 환경변수 파일 로드
  output:
    ansi:
      enabled: always # ANSI 콘솔 색상 활성화 (JUnit 테스트 포함)
  web:
    resources:
      add-mappings: false # 정적 리소스 매핑 추가 여부 false
  servlet:
    multipart:
      max-request-size: 30MB # 최대 요청 크기, ⭐nginx client_max_body_size와 동일하게 설정
      max-file-size: 10MB # 최대 파일 크기
  jpa:
    open-in-view: false # open in view 설정
    hibernate:
      ddl-auto: update # 테이블 자동 생성 대신 스키마 검증으로 전환
    properties:
      hibernate:
        #dialect: org.hibernate.dialect.MySQLDialect # Hibernate Dialect 설정
        format_sql: true # SQL 포맷팅
        highlight_sql: true # SQL 하이라이트 출력
        use_sql_comments: true # JPQL SQL 주석 사용
        default_batch_fetch_size: 100
        jdbc:
          lob:
            non_contextual_creation: true
  jackson:
    deserialization:
      fail-on-unknown-properties: false
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
  task:
    scheduling:
      pool:
        size: 5
    execution:
      pool:
        core-size: 10
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

  flyway:
    enabled: true
    locations: classpath:db/migration
    check-location: true

app:
  props:
    python-server-url: ${PYTHON_SERVER_URL}
    social:
      google:
        client-id: ${GOOGLE_CLIENT_ID}
        token-uri: https://oauth2.googleapis.com/token
        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      access-token-expiration-period: 60
      refresh-token-expiration-period: 43200
    aes:
      secret-key: ${AES_SECRET_KEY}
  rabbitmq:
    prefetch: ${RABBITMQ_PREFETCH:16}

---
spring:
  config:
    activate:
      on-profile: local

  elasticsearch:
    uris: ${LOCAL_ELASTICSEARCH_URIS}
    username: elastic
    password: ${ELASTIC_PASSWORD}
    restclient:
      ssl:
        bundle: es

  ssl:
    bundle:
      pem:
        es:
          truststore:
            certificate: classpath:certs/ca/ca.crt

  #  data:
  #    mongodb:
  #      url: ${LOCAL_MONGODB_URL}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${LOCAL_MYSQL_URL}
    username: ${LOCAL_MYSQL_USERNAME}
    password: ${LOCAL_MYSQL_PASSWORD}

  flyway:
    enabled: false
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1

app:
  props:
    social:
      google:
        redirect-uri: ${GOOGLE_REDIRECT_URI}

logging:
  level:
    org.hibernate.SQL: debug # Hibernate SQL 로그 레벨
    org.hibernate.orm.jdbc.bind: trace # Hibernate SQL 바인딩 로그 레벨
    org.springframework.transaction.interceptor: trace # Spring 트랜잭션 인터셉터 로그 레벨
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: when_authorized

---
spring:
  config:
    activate:
      on-profile: prod # 운영 환경
  elasticsearch:
    uris: ${PROD_ELASTICSEARCH_URIS}
    username: elastic
    password: ${ELASTIC_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
  flyway:
    enabled: false
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1
  sql:
    init:
      platform: mysql # SQL 초기화 플랫폼 (mysql, h2, postgresql, oracle, sqlserver)
      data-locations: classpath:sql/data.sql # ddl-auto가 create, create-drop, update일 경우에만 해당, validate/none일 경우 무시됨
      mode: never # SQL 초기화 모드 (always, never, embedded, embedded-always)

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${PROD_MYSQL_URL}
    username: ${PROD_MYSQL_USERNAME}
    password: ${PROD_MYSQL_PASSWORD}
    hikari:
      max-lifetime: 600000 # 최대 수명 (밀리초)
      idle-timeout: 300000 # 유휴 시간 (밀리초)
      connection-timeout: 30000 # 연결 시간 초과 (밀리초)

app:
  props:
    social:
      google:
        redirect-uri: ${GOOGLE_REDIRECT_URI}

logging:
  level:
    org.hibernate.SQL: error # Hibernate SQL 로그 레벨

